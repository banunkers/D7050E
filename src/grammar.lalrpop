use std::str::FromStr;

use crate::{
	types::LiteralType,
	ast::Node,
	operators::Opcode
};

grammar;

// Creates a vector containing all the functions of the input = the program
pub Program: Vec<Box<Node>> = {
    VectorizeFuncs => <>
}

pub Statement: Box<Node> = {
    <mut curr:Keyword> ";" <next:Statement> => {
		curr.insert_next(next);
		curr
	},
    <mut curr:Keyword> "}" <next:Statement> => {
		curr.insert_next(next);
		curr
	},
    <Keyword> ";" => <>,
    <Keyword> "}" => <>
};

pub Keyword: Box<Node> = {
    "let" <Assign>,
    "if" <IfStatement>,
    "while" <WhileStatement>,
    Print,
    AssignValue,
    LoopModifier,
    Return,
    FuncCall
};

Print: Box<Node> = {
    "print(" <e:Expr> ")" => Box::new(Node::Print{expr: e, next: None})
};

VectorizeFuncs: Vec<Box<Node>> = {
    <funcs:(<FuncDef> "}")*> <more:FuncDef?> => match more {
        Some(more) => {
            let mut funcs = funcs;
            funcs.push(more);
            funcs
        },
        None => funcs
    }
}

FuncCall: Box<Node> = {
    <n:Identifier>"("<a:FuncArgs>")" => Box::new(
        Node::FuncCall{
            name: n,
            args: a,
			next: None
        }
    )
};

// TODO: Empty functions i.e. fn main(){}
FuncDef: Box<Node> = {
   "fn" <n:Identifier> "("<p:FuncParams>")" <r:("->" <LitType>)?> "{" <s:Statement> => Box::new(
        Node::Func{
            name: n,
            params: p,
            r_type: match r {
                Some(r) => Some(r),
                None => None
            },
            body: s,
        }
    )
};

FuncArgs: Vec<Box<Node>> = {
    VectorizeComma<Expr> => <>
};

FuncParams: Vec<Box<Node>> = {
    VectorizeComma<Param> => <>
};

// Creates a vector containing of a comma-seperated list of type T
VectorizeComma<T>: Vec<Box<Node>> = {
    <v:(<T> ",")*> <e:T?> => match e {
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        },

        None => v
    }
}

Param: Box<Node> = {
    <Var> ":" <LitType> => Box::new(Node::FuncParam(<>))
};

Return: Box<Node> = {
    "return" <Expr> => Box::new(Node::Return(<>))
};

LoopModifier: Box<Node> = {
    "break" => Box::new(Node::Break),
    "continue" => Box::new(Node::Continue)
};

// TODO: Make parentheses optional in loops
WhileStatement: Box<Node> = {
    "(" <c:Cond> ")" "{" <s:Statement> => Box::new(
        Node::While{
            cond: c,
            statement: s,
			next: None
        }
    )
};

// TODO: Ignore whitespaces inbetween else statements and "{"
IfStatement: Box<Node> = {
    // Plain if
    "(" <c:Cond> ")" "{" <i:Statement> => Box::new(
        Node::If{
            cond: c,
            statement: i,
			next: None
        }
    ),

    // if-else
    "(" <c:Cond> ")" "{" <i:Statement> "} else {" <e:Statement> => Box::new(
        Node::IfElse{
            cond: c,
            if_statement: i,
            else_statement: e,
			next: None
        }
    ),

    // else-if
    "(" <c:Cond> ")" "{" <i:Statement> "} else if" <ei:IfStatement>  => Box::new(
        Node::IfElse{
            cond: c,
            if_statement: i,
            else_statement: ei,  // Contains the else-if statement
			next: None
        }
    )
};

Cond: Box<Node> = {
    Expr => <>
};

// Declaring new vars i.e "let x: i32 = 3;"
Assign: Box<Node> = {
    <a:AssignBinding> <e:Expr> => Box::new(Node::Let{var: a, expr: e, next: None})
};

// Updating value of vars i.e "x = x + 1;"
AssignValue: Box<Node> = {
    <v:Var> "=" <e:Expr> => Box::new(Node::VarValue{var: v, expr: e, next: None})
};

AssignBinding: Box<Node> = {
    <m:("mut")?> <v:Var> ":" <t:LitType> "=" => Box::new(
		Node::VarBinding(
			v, 
			t,
			match m {
				Some(m) => true,
				None => false
			}
		)
	)
};

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::Expr(<>)),
	Expr ExprRelOp Factor => Box::new(Node::Expr(<>)),
    Factor
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

ExprRelOp: Opcode = {
	"==" => Opcode::EQ,
    "!=" => Opcode::NEQ,
    ">" => Opcode::GT,
    "<" => Opcode::LT,
    ">=" => Opcode::GEQ,
    "<=" => Opcode::LEQ,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::Expr(<>)),
	Factor FactorLogOp Term => Box::new(Node::Expr(<>)),
    Term
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

FactorLogOp: Opcode = {
	"&&" => Opcode::AND,
    "||" => Opcode::OR,
};

UnaryOp: Opcode = {
	"-" => Opcode::Sub
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
	<o:UnaryOp> <n:Num> => Box::new(Node::UnaryOp(o, Box::new(Node::Number(n)))),
    Var,
    Bool,
    _String,
	FuncCall,
    "(" <Expr> ")"
};

_String: Box<Node> = {
    "\"" <Identifier> "\"" => Box::new(Node::_String(<>))
};

Bool: Box<Node> = {
    "true" => Box::new(Node::Bool(true)),
    "false" => Box::new(Node::Bool(false))
};

LitType: LiteralType = {
    "bool" => LiteralType::Bool,
    "i32" => LiteralType::I32,
    "String" => LiteralType::_String,
};

Var: Box<Node> = {
    Identifier => Box::new(Node::Var(<>))
};

// Nonterminals
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>)
};