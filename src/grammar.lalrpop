use std::str::FromStr;

use crate::types::{
    LiteralType,
    Function
};

use crate::ast::Node;
use crate::operators::{
    BinOpcode,
    LogOpcode,
    RelOpcode
};

grammar;

// Creates a vector containing all the functions of the input = the program
pub Program: Vec<Box<Node>> = {
    VectorizeFuncs => <>
}

pub Statement: Box<Node> = {
    <Keyword> ";" <Statement> => Box::new(Node::Statement(<>)),
    <Keyword> "}" <Statement> => Box::new(Node::Statement(<>)),
    <Keyword> ";",
    <Keyword> "}"
};

pub Keyword: Box<Node> = {
    "let" <Assign>,
    "if" <IfStatement>,
    "while" <WhileStatement>,
    AssignValue,
    LoopModifier,
    Return,
    FuncCall
};

VectorizeFuncs: Vec<Box<Node>> = {
    <funcs:(<FuncDef> "}")*> <more:FuncDef?> => match more {
        Some(more) => {
            let mut funcs = funcs;
            funcs.push(more);
            funcs
        },
        None => funcs
    }
}

FuncCall: Box<Node> = {
    <n:FuncName>"("<a:FuncArgs>")" => Box::new(
        Node::FuncCall{
            name: n,
            args: a
        }
    )
};

// TODO: Empty functions i.e. fn main(){}
FuncDef: Box<Node> = {
   "fn" <n:FuncName> "("<p:FuncParams>")" <r:("->" <FuncType>)?> "{" <s:Statement> => Box::new(
        Node::Func{
            name: n,
            params: p,
            r_type: match r {
                Some(r) => r,
                None => Function::ReturnType(LiteralType::None)
            },
            body: s,
        }
    )
};

FuncName: Function = {
    Identifier => Function::Name(<>)
};

FuncArgs: Function = {
    VectorizeComma<Expr> => Function::Args(<>)
};

FuncParams: Function = {
    VectorizeComma<Param> => Function::Params(<>)
};

FuncType: Function = {
    LitType => Function::ReturnType(<>)
};

// Creates a vector containing of a comma-seperated list of type T
VectorizeComma<T>: Vec<Box<Node>> = {
    <v:(<T> ",")*> <e:T?> => match e {
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        },

        None => v
    }
}

Param: Box<Node> = {
    <Var> ":" <LitType> => Box::new(Node::FuncParam(<>))
};

Return: Box<Node> = {
    "return" <Expr> => Box::new(Node::Return(<>)),
    "return" <RelExpr> => Box::new(Node::Return(<>)),
    "return" <LogExpr> => Box::new(Node::Return(<>))
};

LoopModifier: Box<Node> = {
    "break" => Box::new(Node::Break),
    "continue" => Box::new(Node::Continue)
};

// TODO: Make parentheses optional in loops
WhileStatement: Box<Node> = {
    "(" <c:Cond> ")" "{" <s:Statement> => Box::new(
        Node::While{
            cond: c,
            statement: s
        }
    )
};

// TODO: Ignore whitespaces inbetween else statements and "{"
IfStatement: Box<Node> = {
    // Plain if
    "(" <c:Cond> ")" "{" <i:Statement> => Box::new(
        Node::If{
            cond: c,
            statement: i
        }
    ),

    // if-else
    "(" <c:Cond> ")" "{" <i:Statement> "} else {" <e:Statement> => Box::new(
        Node::IfElse{
            cond: c,
            if_statement: i,
            else_statement: e
        }
    ),

    // else-if
    "(" <c:Cond> ")" "{" <i:Statement> "} else if" <ei:IfStatement>  => Box::new(
        Node::IfElse{
            cond: c,
            if_statement: i,
            else_statement: ei  // Contains the else-if statement
        }
    )
};

Cond: Box<Node> = {
    LogExpr => <>,
    RelExpr => <>,
    Expr => <>
};

// Declaring new vars i.e "let x: i32 = 3;"
Assign: Box<Node> = {
    AssignBinding LogExpr => Box::new(Node::Let(<>)),
    AssignBinding RelExpr => Box::new(Node::Let(<>)),
    AssignBinding Expr => Box::new(Node::Let(<>)),
};

// Updating value of vars i.e "x = x + 1;"
AssignValue: Box<Node> = {
    <Var> "=" <Expr> => Box::new(Node::VarValue(<>)),
    <Var> "=" <LogExpr> => Box::new(Node::VarValue(<>)),
    <Var> "=" <RelExpr> => Box::new(Node::VarValue(<>)),
    <Var> "=" <FuncCall> => Box::new(Node::VarValue(<>)),
};

AssignBinding: Box<Node> = {
    <Var> ":" <LitType> "=" => Box::new(Node::VarBinding(<>))
};

// log = "&&, ||"
pub LogExpr: Box<Node> = {
    LogExpr LogOp Expr => Box::new(Node::LogOp(<>)),
    LogExpr LogOp RelExpr => Box::new(Node::LogOp(<>)),
    
    RelExpr LogOp RelExpr => Box::new(Node::LogOp(<>)),
    RelExpr LogOp Expr => Box::new(Node::LogOp(<>)),
    
    Expr LogOp Expr => Box::new(Node::LogOp(<>)),
    Expr LogOp RelExpr => Box::new(Node::LogOp(<>))
};


// rel = "==, >, >=" etc
// TODO: Support true == (5 > 4)
pub RelExpr: Box<Node> = {
    RelExpr RelOp Expr => Box::new(Node::RelOp(<>)),
    Expr RelOp Expr => Box::new(Node::RelOp(<>))
};

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::BinOp(<>)),
    Factor
};

ExprOp: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Sub
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::BinOp(<>)),
    Term
};

FactorOp: BinOpcode = {
    "*" => BinOpcode::Mul,
    "/" => BinOpcode::Div
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
    Var,
    Bool,
    "(" <Expr> ")"
};

Bool: Box<Node> = {
    "true" => Box::new(Node::Bool(true)),
    "false" => Box::new(Node::Bool(false))
};

LitType: LiteralType = {
    "bool" => LiteralType::Bool,
    
    // Singed
    "i8" => LiteralType::I8,
    "i16" => LiteralType::I16,
    "i32" => LiteralType::I32,
    "i64" => LiteralType::I64,
    "isize" => LiteralType::Isize,

    // Unsigned
    "u8" => LiteralType::U8,
    "u16" => LiteralType::U16,
    "u32" => LiteralType::U32,
    "u64" => LiteralType::U64,
    "usize" => LiteralType::Usize,

    // Floats
    "f32" => LiteralType::F32,
    "f64" => LiteralType::F64,
    
    //array,
    //slice,
    "str" => LiteralType::Str,
    "char" => LiteralType::Char

};

LogOp: LogOpcode = {
    "&&" => LogOpcode::AND,
    "||" => LogOpcode::OR,
    // "!" => LogOpcode::NOT
};

RelOp: RelOpcode = {
    "==" => RelOpcode::EQ,
    "!=" => RelOpcode::NEQ,
    ">" => RelOpcode::GT,
    "<" => RelOpcode::LT,
    ">=" => RelOpcode::GEQ,
    "<=" => RelOpcode::LEQ
};

// Nonterminals
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>)
};

Var: Box<Node> = {
    Identifier => Box::new(Node::Var(<>))
};