use std::str::FromStr;

use crate::types::{
    LiteralType,
    BoolType
};

use crate::ast::Node;
use crate::operators::{
    BinOpcode,
    LogOpcode,
    RelOpcode
};

grammar;

pub Keyword: Box<Node> = {
    "let" <Assign>,
    "if" <StatementIf>
};

Assign: Box<Node> = {
    <a:AssignBinding> "=" <e:Expr> ";" => {
        Box::new(Node::Let{var: a, expr: e})
    }
};

StatementIf: Box<Node> = {
    "(" <Cond> ")" "{" <Content> "}" =>
};

Cond: Box<Node> = {
    LogExpr => <>,
    RelExpr => <>
};

AssignBinding: Box<Node> = {
    <var: Identifier> ":" <typ: LitType> => {
        Box::new(Node::VarBinding{name: var, var_type: typ})
    }
};

// log = "&&, ||"
pub LogExpr: Box<Node> = {
    LogExpr LogOp RelExpr => Box::new(Node::LogOp(<>)),
    RelExpr LogOp RelExpr => Box::new(Node::LogOp(<>)),
};

// rel = "==, >, >=" etc
pub RelExpr: Box<Node> = {
    RelExpr RelOp Expr => Box::new(Node::RelOp(<>)),
    Expr
};

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::BinOp(<>)),
    Factor
};

ExprOp: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Sub,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::BinOp(<>)),
    Term,
};

FactorOp: BinOpcode = {
    "*" => BinOpcode::Mul,
    "/" => BinOpcode::Div,
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
    Var,
    Bool,
    "(" <Expr> ")",
};

Var: Box<Node> = {
    Identifier => Box::new(Node::Var(<>))
};

Bool: Box<Node> = {
    "true" => Box::new(Node::Bool(BoolType::True)),
    "false" => Box::new(Node::Bool(BoolType::False))
};

LitType: LiteralType = {
    "bool" => LiteralType::Bool,
    
    // Singed
    "i8" => LiteralType::I8,
    "i16" => LiteralType::I16,
    "i32" => LiteralType::I32,
    "i64" => LiteralType::I64,
    "isize" => LiteralType::Isize,

    // Unsigned
    "u8" => LiteralType::U8,
    "u16" => LiteralType::U16,
    "u32" => LiteralType::U32,
    "u64" => LiteralType::U64,
    "usize" => LiteralType::Usize,

    // Floats
    "f32" => LiteralType::F32,
    "f64" => LiteralType::F64,
    
    //array,
    //slice,
    "str" => LiteralType::Str,
    "char" => LiteralType::Char,

};

LogOp: LogOpcode = {
    "&&" => LogOpcode::AND,
    "||" => LogOpcode::OR,
    // "!" => LogOpcode::NOT
};

RelOp: RelOpcode = {
    "==" => RelOpcode::EQ,
    "!=" => RelOpcode::NEQ,
    ">" => RelOpcode::GT,
    "<" => RelOpcode::LT,
    ">=" => RelOpcode::GEQ,
    "<=" => RelOpcode::LEQ
};
// Nonterminals
Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>)
};