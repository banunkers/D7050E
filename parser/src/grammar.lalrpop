use std::str::FromStr;

use crate::types::LiteralType;
use crate::ast::Node;
use crate::operators::{
    BinOpcode,
    BoolOpcode
};

grammar;

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::BinOp(<>)),
    Factor,
};

ExprOp: BinOpcode = {
    "+" => BinOpcode::Add,
    "-" => BinOpcode::Sub,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::BinOp(<>)),
    Term,
};

FactorOp: BinOpcode = {
    "*" => BinOpcode::Mul,
    "/" => BinOpcode::Div,
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
    Var => Box::new(Node::Var(<>)),
    "(" <Expr> ")",
};

Var = Identifier;


// pub Let: Box<Node> = {
//     "let" <var: Var> ":" <typ: LitType> "=" <expr: Expr> ";" => {
//         Box::new(Node::Let{
//             var: Box::new(Node::AssignVar{name: var, var_type: typ}),
//             expr: expr
//         })
//     }
// };


pub Let: Box<Node> = {
    <a:Assign> <e:Expr> ";" => {
        Box::new(Node::Let{var: a, expr: e})
    }
};

Assign: Box<Node> = {
    "let" <var: Var> ":" <typ: LitType> "=" => {
        Box::new(Node::AssignVar{name: var, var_type: typ})
    }
}

LitType: LiteralType = {
    "bool" => LiteralType::Bool,
    
    // Singed
    "i8" => LiteralType::I8,
    "i16" => LiteralType::I16,
    "i32" => LiteralType::I32,
    "i64" => LiteralType::I64,
    "isize" => LiteralType::Isize,

    // Unsigned
    "u8" => LiteralType::U8,
    "u16" => LiteralType::U16,
    "u32" => LiteralType::U32,
    "u64" => LiteralType::U64,
    "usize" => LiteralType::Usize,

    // Floats
    "f32" => LiteralType::F32,
    "f64" => LiteralType::F64,
    
    //array,
    //slice,
    "str" => LiteralType::Str,
    "char" => LiteralType::Char,

};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>)
};