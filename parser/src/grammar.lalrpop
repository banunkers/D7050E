use std::str::FromStr;

use crate::ast::{
    Node,
    Opcode
};

grammar;

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
    Var => Box::new(Node::Var(<>)),
    "(" <Expr> ")",
};

Var = Identifier;

pub Let: Box<Node> = {
    "let" <name: Identifier> "=" <expr: Expr> ";" => {
        Box::new(Node::Let{
            var: Box::new(Node::Var(name)),
            expr: expr
        })
    }
}

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>)
};